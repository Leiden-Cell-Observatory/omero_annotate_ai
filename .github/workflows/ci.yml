name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce CI time if needed
          - os: macos-latest
            python-version: '3.8'
          - os: windows-latest  
            python-version: '3.8'

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install libomp

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test,dev]

    - name: Lint with flake8
      run: |
        flake8 src/omero_annotate_ai --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/omero_annotate_ai --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: |
        black --check --diff src/omero_annotate_ai

    - name: Import sort check with isort
      run: |
        isort --check-only --diff src/omero_annotate_ai

    - name: Run basic import tests
      run: |
        python -c "import omero_annotate_ai; print('✅ Package imports successfully')"
        python -c "from omero_annotate_ai.core.config import load_config; print('✅ Config module works correctly')"
        python -c "from omero_annotate_ai.widgets.config_widget import create_config_widget; print('✅ Widget module works correctly')"

    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --cov=omero_annotate_ai --cov-report=xml --cov-report=term-missing -m "not (omero or integration or docker)"

    - name: Run integration tests with Docker (Ubuntu only)
      if: runner.os == 'Linux' && matrix.python-version == '3.11'
      run: |
        # Start OMERO server
        cd tests
        docker-compose up -d
        
        # Wait for services to be ready
        sleep 60
        
        # Run OMERO integration tests
        cd ..
        python -m pytest tests/test_omero_integration.py -v -m "omero or integration" || true
        
        # Cleanup
        cd tests
        docker-compose down -v

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build distribution packages
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build source distribution and wheel
      run: |
        python -m build

    - name: Check distribution packages
      run: |
        python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    environment:
      name: pypi
      url: https://pypi.org/p/omero-annotate-ai
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1