[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "omero-annotate-ai"
version = "0.1.0"
description = "OMERO integration for AI-powered image annotation and segmentation workflows"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Maarten Paul", email = "m.w.paul@lumc.nl"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["omero", "microscopy", "segmentation", "ai", "annotation", "sam", "micro-sam"]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "imageio>=2.9.0",
    "zarr>=2.10.0",
    "dask>=2021.6.0",
    "pyyaml>=6.0",
    "ipywidgets>=7.6.0",
    "opencv-python>=4.5.0",
    "keyring>=23.0.0", "ezomero>=2.1.0,<3",
]

[project.optional-dependencies]
microsam = [
    "napari>=0.4.15",
    # Note: micro-sam is conda-only, install with: conda install -c conda-forge micro-sam
    # or use: pixi install (recommended for full environment)
]

dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=22.0",
    "isort>=5.0",
    "flake8>=4.0",
]
omero = [
    # OMERO functionality is already included in main dependencies
]
test = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "pytest-mock>=3.0",
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "sphinxcontrib-napoleon>=0.7",
    "myst-parser>=0.18",
]
all = [
    "napari>=0.4.15",
    # Note: micro-sam must be installed via conda
    # conda install -c conda-forge micro-sam
    # or use: pixi install (recommended)
]
[project.urls]
Homepage = "https://github.com/Leiden-Cell-Observatory/omero_annotate_ai"
Repository = "https://github.com/Leiden-Cell-Observatory/omero_annotate_ai.git"
Issues = "https://github.com/Leiden-Cell-Observatory/omero_annotate_ai/issues"
[tool.setuptools.packages.find]
[tool.setuptools.packages.find]
where = ["src"]ro_annotate_ai*"]
include = ["omero_annotate_ai*"]
[tool.setuptools.package-data]
[tool.setuptools.package-data].yaml"]
omero_annotate_ai = ["config/*.yaml"]
[tool.black]
[tool.black]= 88
line-length = 88 ['py38']
target-version = ['py38']
[tool.isort]
[tool.isort]lack"
profile = "black"
line_length = 88
[tool.pytest.ini_options]
[tool.pytest.ini_options]
testpaths = ["tests"]_*.py"]
python_files = ["test_*.py"]
python_classes = ["Test*"]*"]
python_functions = ["test_*"]te_ai --cov-report=html --cov-report=term-missing"
addopts = "--cov=omero_annotate_ai --cov-report=html --cov-report=term-missing"
# Pixi configuration
# Pixi configuration
[tool.pixi.project]forge"]
channels = ["conda-forge"]win-64", "osx-64", "osx-arm64"]
platforms = ["linux-64", "win-64", "osx-64", "osx-arm64"]
[tool.pixi.dependencies]
[tool.pixi.dependencies]
python = "3.12.*"
micro_sam = "*"1.1,<2"
jupyter = ">=1.1.1,<2""
napari = ">=0.6.2,<0.7"
# Add build dependencies[tool.pixi.pypi-dependencies]
build = "*"".", editable = true }
twine = "*"
[tool.pixi.target.win-64.pypi-dependencies]
[tool.pixi.pypi-dependencies]ncoesoftware/zeroc-ice-py-win-x86_64/releases/download/20240325/zeroc_ice-3.6.5-cp312-cp312-win_amd64.whl" }
omero-annotate-ai = { path = ".", editable = true }
[tool.pixi.target.linux-64.pypi-dependencies]
# Add pixi tasks for CI/CDoesoftware/zeroc-ice-py-linux-x86_64/releases/download/20240202/zeroc_ice-3.6.5-cp312-cp312-manylinux_2_28_x86_64.whl" }
[tool.pixi.tasks]
test = "pytest tests/ -v"[tool.pixi.target.osx-64.pypi-dependencies]
test-cov = "pytest tests/ --cov=omero_annotate_ai --cov-report=xml"ncoesoftware/zeroc-ice-py-macos-universal2/releases/download/20240131/zeroc_ice-3.6.5-cp312-cp312-macosx_11_0_universal2.whl" }
lint = "flake8 src/ tests/"
format = "black src/ tests/"[tool.pixi.target.osx-arm64.pypi-dependencies]
format-check = "black --check src/ tests/"esoftware/zeroc-ice-py-macos-universal2/releases/download/20240131/zeroc_ice-3.6.5-cp312-cp312-macosx_11_0_universal2.whl" }
sort-imports = "isort src/ tests/"sort-imports-check = "isort --check-only src/ tests/"
build-package = "python -m build"
clean = "rm -rf dist/ build/ *.egg-info/"

# Platform-specific zeroc-ice dependencies...
[tool.pixi.target.win-64.pypi-dependencies]
zeroc-ice = { url = "https://github.com/glencoesoftware/zeroc-ice-py-win-x86_64/releases/download/20240325/zeroc_ice-3.6.5-cp312-cp312-win_amd64.whl" }

[tool.pixi.target.linux-64.pypi-dependencies]
zeroc-ice = { url = "https://github.com/glencoesoftware/zeroc-ice-py-linux-x86_64/releases/download/20240202/zeroc_ice-3.6.5-cp312-cp312-manylinux_2_28_x86_64.whl" }

[tool.pixi.target.osx-64.pypi-dependencies]
zeroc-ice = { url = "https://github.com/glencoesoftware/zeroc-ice-py-macos-universal2/releases/download/20240131/zeroc_ice-3.6.5-cp312-cp312-macosx_11_0_universal2.whl" }

[tool.pixi.target.osx-arm64.pypi-dependencies]
zeroc-ice = { url = "https://github.com/glencoesoftware/zeroc-ice-py-macos-universal2/releases/download/20240131/zeroc_ice-3.6.5-cp312-cp312-macosx_11_0_universal2.whl" }
