[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "omero-annotate-ai"
version = "0.1.0"
description = "OMERO integration for AI-powered image annotation and segmentation workflows"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Maarten Paul", email = "m.w.paul@lumc.nl"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["omero", "microscopy", "segmentation", "ai", "annotation", "sam", "micro-sam"]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "imageio>=2.9.0",
    "zarr>=2.10.0",
    "dask>=2021.6.0",
    "pyyaml>=6.0",
    "ipywidgets>=7.6.0",
    "opencv-python>=4.5.0",
    "keyring>=23.0.0",
    "ezomero>=2.1.0,<3",
]

[project.optional-dependencies]
microsam = [
    "napari>=0.4.15",
    # Note: micro-sam is conda-only, install with: conda install -c conda-forge micro-sam
    # or use: pixi install (recommended for full environment)
]

dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=22.0",
    "isort>=5.0",
    "flake8>=4.0",
]
omero = [
    # OMERO functionality is already included in main dependencies
]
test = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "pytest-mock>=3.0",
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "sphinxcontrib-napoleon>=0.7",
    "myst-parser>=0.18",
]
all = [
    "napari>=0.4.15",
    # Note: micro-sam must be installed via conda
    # conda install -c conda-forge micro-sam
    # or use: pixi install (recommended)
]

[project.urls]
Homepage = "https://github.com/Leiden-Cell-Observatory/omero_annotate_ai"
Repository = "https://github.com/Leiden-Cell-Observatory/omero_annotate_ai.git"
Issues = "https://github.com/Leiden-Cell-Observatory/omero_annotate_ai/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["omero_annotate_ai*"]

[tool.setuptools.package-data]
omero_annotate_ai = ["config/*.yaml"]

[tool.black]
line-length = 88
target-version = ['py38']

[tool.isort]
profile = "black"
line_length = 88

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=omero_annotate_ai --cov-report=html --cov-report=term-missing"

# Pixi configuration
[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "win-64", "osx-64", "osx-arm64"]

# Default environment - minimal user installation
[tool.pixi.dependencies]
python = "3.12.*"
micro_sam = "*"
jupyter = ">=1.1.1,<2"
napari = ">=0.6.2,<0.7"

# Development feature
[tool.pixi.feature.dev.dependencies]
pytest = ">=8.4.1,<9"
pytest-cov = ">=6.2.1,<7"
pytest-mock = ">=3.14.1,<4"
flake8 = ">=7.3.0,<8"
black = ">=25.1.0,<26"
isort = ">=6.0.1,<7"

[tool.pixi.feature.dev.pypi-dependencies]
build = "*"
twine = "*"

# Environment definitions
[tool.pixi.environments]
default = []
dev = ["dev"]

[tool.pixi.pypi-dependencies]
omero-annotate-ai = { path = ".", editable = true }

[tool.pixi.tasks]
test = {cmd = "pytest tests/ -v"}
test-cov = { cmd = "pytest tests/ --cov=omero_annotate_ai --cov-report=xml" }
lint = { cmd = "flake8 src/ tests/" }
format = { cmd = "black src/ tests/" }
format-check = { cmd = "black --check src/ tests/" }
sort-imports = { cmd = "isort src/ tests/" }
sort-imports-check = { cmd = "isort --check-only src/ tests/" }
build-package = { cmd = "python -m build" }

# Platform-specific zeroc-ice dependencies
[tool.pixi.target.win-64.pypi-dependencies]
zeroc-ice = { url = "https://github.com/glencoesoftware/zeroc-ice-py-win-x86_64/releases/download/20240325/zeroc_ice-3.6.5-cp312-cp312-win_amd64.whl" }

[tool.pixi.target.linux-64.pypi-dependencies]
zeroc-ice = { url = "https://github.com/glencoesoftware/zeroc-ice-py-linux-x86_64/releases/download/20240202/zeroc_ice-3.6.5-cp312-cp312-manylinux_2_28_x86_64.whl" }

[tool.pixi.target.osx-64.pypi-dependencies]
zeroc-ice = { url = "https://github.com/glencoesoftware/zeroc-ice-py-macos-universal2/releases/download/20240131/zeroc_ice-3.6.5-cp312-cp312-macosx_11_0_universal2.whl" }

[tool.pixi.target.osx-arm64.pypi-dependencies]
zeroc-ice = { url = "https://github.com/glencoesoftware/zeroc-ice-py-macos-universal2/releases/download/20240131/zeroc_ice-3.6.5-cp312-cp312-macosx_11_0_universal2.whl" }
